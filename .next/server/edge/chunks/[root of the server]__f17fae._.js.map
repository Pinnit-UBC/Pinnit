{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/lib/db.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\n// Function to connect to MongoDB\nconst connectMongo = async (): Promise<void> => {\n  if (mongoose.connection.readyState >= 1) return;\n\n  await mongoose.connect(process.env.MONGO_URI as string, {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n  });\n};\n\nexport default connectMongo;\n"],"names":[],"mappings":";;;AAAA;;AAEA,iCAAiC;AACjC,MAAM,eAAe;IACnB,IAAI,kJAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,UAAU,IAAI,GAAG;IAEzC,MAAM,kJAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,SAAS,EAAY;QACtD,iBAAiB;QACjB,oBAAoB;IACtB;AACF;uCAEe"}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/models/Session.ts"],"sourcesContent":["import mongoose, { Document, Schema, Model, model } from 'mongoose';\n\n// Define the TypeScript interface for the Session model\nexport interface ISession extends Document {\n  user_id: mongoose.Types.ObjectId; // Reference to User\n  session_token: string;\n  expires_at: Date;\n}\n\n// Create the Mongoose schema for the Session model\nconst sessionSchema: Schema<ISession> = new Schema({\n  user_id: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  session_token: { type: String, required: true },\n  expires_at: { type: Date, required: true },\n});\n\n// Export the Session model with the TypeScript type\nconst Session: Model<ISession> = mongoose.models.Session || model<ISession>('Session', sessionSchema);\nexport default Session;\n"],"names":[],"mappings":";;;AAAA;;AASA,mDAAmD;AACnD,MAAM,gBAAkC,IAAI,kJAAA,CAAA,SAAM,CAAC;IACjD,SAAS;QAAE,MAAM,kJAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAQ,UAAU;IAAK;IAC7E,eAAe;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC9C,YAAY;QAAE,MAAM;QAAM,UAAU;IAAK;AAC3C;AAEA,oDAAoD;AACpD,MAAM,UAA2B,kJAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,OAAO,IAAI,CAAA,GAAA,kJAAA,CAAA,QAAK,AAAD,EAAY,WAAW;uCACxE"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport connectMongo from '@/lib/db';\nimport Session from '@/models/Session';\n\nexport async function middleware(req: NextRequest) {\n  const sessionToken = req.cookies.get('sessionToken')?.value;\n\n  if (!sessionToken) {\n    return NextResponse.redirect(new URL('/login', req.url));\n  }\n\n  await connectMongo();\n\n  // Validate session in MongoDB\n  const session = await Session.findOne({ session_token: sessionToken });\n\n  if (!session || new Date() > new Date(session.expires_at)) {\n    return NextResponse.redirect(new URL('/login', req.url));\n  }\n\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: ['/protected/:path*'], // Apply middleware to protected routes\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAFA;;;;AAIO,eAAe,WAAW,GAAgB;IAC/C,MAAM,eAAe,IAAI,OAAO,CAAC,GAAG,CAAC,iBAAiB;IAEtD,IAAI,CAAC,cAAc;QACjB,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG;IACxD;IAEA,MAAM,CAAA,GAAA,gHAAA,CAAA,UAAY,AAAD;IAEjB,8BAA8B;IAC9B,MAAM,UAAU,MAAM,wHAAA,CAAA,UAAO,CAAC,OAAO,CAAC;QAAE,eAAe;IAAa;IAEpE,IAAI,CAAC,WAAW,IAAI,SAAS,IAAI,KAAK,QAAQ,UAAU,GAAG;QACzD,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG;IACxD;IAEA,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;KAAoB;AAChC"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}