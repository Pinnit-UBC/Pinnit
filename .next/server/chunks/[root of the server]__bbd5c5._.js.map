{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/events/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport mongoose from \"mongoose\";\n\n// Ensure the MongoDB URI is defined\nconst mongoUri = process.env.MONGO_URI;\nif (!mongoUri) {\n  throw new Error(\"MONGO_URI is not defined in the environment variables\");\n}\n\n// Connect to MongoDB if not already connected\nif (!mongoose.connection.readyState) {\n  mongoose.connect(mongoUri);\n}\n\nexport async function GET(req: NextRequest) {\n  try {\n    // Get the date from the query parameter or default to today's date\n    const url = new URL(req.url);\n    const dateParam = url.searchParams.get(\"date\");\n    const currentDate = dateParam ? new Date(dateParam) : new Date();\n\n    // Format the date to match the collection naming convention\n    const formattedDate = `${currentDate.getFullYear()}_${String(\n      currentDate.getMonth() + 1\n    ).padStart(2, \"0\")}_${String(currentDate.getDate()).padStart(2, \"0\")}`;\n    const collectionName = `Event_${formattedDate}`;\n\n    // Dynamically get the Mongoose model for the specific collection\n    const Event = mongoose.connection.model(\n      collectionName,\n      new mongoose.Schema({}, { strict: false }),\n      collectionName // Explicitly set the collection name\n    );\n\n    // Fetch events from the specified collection\n    const events = await Event.find({}).sort({ start_time: 1 }).exec();\n\n    // Return the events as JSON\n    return NextResponse.json(events);\n  } catch (error) {\n    console.error(\"Error fetching events:\", error);\n    return NextResponse.json({ error: \"Error fetching events\" }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,oCAAoC;AACpC,MAAM,WAAW,QAAQ,GAAG,CAAC,SAAS;AACtC,IAAI,CAAC,UAAU;IACb,MAAM,IAAI,MAAM;AAClB;AAEA,8CAA8C;AAC9C,IAAI,CAAC,iGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,UAAU,EAAE;IACnC,iGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;AACnB;AAEO,eAAe,IAAI,GAAgB;IACxC,IAAI;QACF,mEAAmE;QACnE,MAAM,MAAM,IAAI,IAAI,IAAI,GAAG;QAC3B,MAAM,YAAY,IAAI,YAAY,CAAC,GAAG,CAAC;QACvC,MAAM,cAAc,YAAY,IAAI,KAAK,aAAa,IAAI;QAE1D,4DAA4D;QAC5D,MAAM,gBAAgB,GAAG,YAAY,WAAW,GAAG,CAAC,EAAE,OACpD,YAAY,QAAQ,KAAK,GACzB,QAAQ,CAAC,GAAG,KAAK,CAAC,EAAE,OAAO,YAAY,OAAO,IAAI,QAAQ,CAAC,GAAG,MAAM;QACtE,MAAM,iBAAiB,CAAC,MAAM,EAAE,eAAe;QAE/C,iEAAiE;QACjE,MAAM,QAAQ,iGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,KAAK,CACrC,gBACA,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,CAAC,GAAG;YAAE,QAAQ;QAAM,IACxC,eAAe,qCAAqC;;QAGtD,6CAA6C;QAC7C,MAAM,SAAS,MAAM,MAAM,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC;YAAE,YAAY;QAAE,GAAG,IAAI;QAEhE,4BAA4B;QAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF"}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}